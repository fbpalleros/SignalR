@model List<TpSignalR.Entidades.Mensaje>

@{
    ViewData["Title"] = "Chat en Tiempo Real";
    Layout = "~/Views/Shared/_InicioLayout.cshtml";
    var usuario = Context.Session.GetString("NombreUsuario");
    var estaLogueado = !string.IsNullOrEmpty(usuario);
}

<style>
    body {
        background-color: #0d0d0d;
    }

    .chat-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: calc(100vh - 200px);
        padding: 40px 20px;
    }

    .chat-container {
        width: 100%;
        max-width: 900px;
        background: #1a1a1a;
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
        overflow: hidden;
        border: 1px solid #2a2a2a;
    }

    .chat-header {
        background: linear-gradient(135deg, #1e3a8a 0%, #1e40af 100%);
        color: white;
        padding: 24px;
        text-align: center;
        border-bottom: 2px solid #2563eb;
    }

    .chat-header h1 {
        margin: 0;
        font-size: 1.8rem;
        font-weight: 600;
    }

    .status {
        margin-top: 8px;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .connected {
        color: #4ade80;
    }

    .disconnected {
        color: #f87171;
    }

    .chat-messages {
        height: 450px;
        overflow-y: auto;
        padding: 24px;
        background: #0d0d0d;
    }

    .chat-messages::-webkit-scrollbar {
        width: 8px;
    }

    .chat-messages::-webkit-scrollbar-track {
        background: #1a1a1a;
    }

    .chat-messages::-webkit-scrollbar-thumb {
        background: #3a3a3a;
        border-radius: 4px;
    }

    .chat-messages::-webkit-scrollbar-thumb:hover {
        background: #4a4a4a;
    }

    .message {
        margin-bottom: 16px;
        padding: 14px 16px;
        border-radius: 10px;
        background: #1a1a1a;
        border: 1px solid #2a2a2a;
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .message:hover {
        transform: translateX(4px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }

    .message-user {
        font-weight: 600;
        color: #3b82f6;
        margin-bottom: 6px;
        font-size: 0.95rem;
    }

    .message-text {
        color: #e5e5e5;
        line-height: 1.5;
        margin-bottom: 6px;
    }

    .message-time {
        font-size: 0.8rem;
        color: #888;
    }

    .chat-input {
        padding: 24px;
        background: #1a1a1a;
        border-top: 1px solid #2a2a2a;
    }

    .input-group {
        display: flex;
        gap: 12px;
    }

    .current-user {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 12px;
        color: #ccc;
        font-size: 0.9rem;
    }

    .current-user-name {
        color: #3b82f6;
        font-weight: 600;
    }

    input[type="text"] {
        flex: 1;
        padding: 14px 16px;
        background: #0d0d0d;
        border: 2px solid #2a2a2a;
        border-radius: 8px;
        font-size: 0.95rem;
        color: #fff;
        transition: border-color 0.3s;
    }

    input[type="text"]::placeholder {
        color: #666;
    }

    input[type="text"]:focus {
        outline: none;
        border-color: #3b82f6;
        background: #111;
    }

    button {
        padding: 14px 32px;
        background: linear-gradient(135deg, #1e3a8a 0%, #2563eb 100%);
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 0.95rem;
        font-weight: 600;
        transition: transform 0.2s, box-shadow 0.2s;
        white-space: nowrap;
    }

    button:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(37, 99, 235, 0.4);
    }

    button:active:not(:disabled) {
        transform: translateY(0);
    }

    button:disabled {
        background: #2a2a2a;
        cursor: not-allowed;
        opacity: 0.5;
    }

    .login-prompt {
        text-align: center;
        padding: 40px 20px;
        background: #1a1a1a;
        border-radius: 10px;
        border: 2px dashed #2a2a2a;
    }

    .login-prompt-icon {
        font-size: 3rem;
        margin-bottom: 16px;
    }

    .login-prompt h3 {
        color: #e5e5e5;
        margin-bottom: 12px;
    }

    .login-prompt p {
        color: #999;
        margin-bottom: 24px;
    }

    .btn-login {
        display: inline-block;
        padding: 14px 32px;
        background: linear-gradient(135deg, #1e3a8a 0%, #2563eb 100%);
        color: white;
        text-decoration: none;
        border-radius: 8px;
        font-weight: 600;
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .btn-login:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(37, 99, 235, 0.4);
        color: white;
    }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #666;
    }

    .empty-state-icon {
        font-size: 3rem;
        margin-bottom: 16px;
    }
</style>

<div class="chat-wrapper">
    <div class="chat-container">
        <div class="chat-header">
            <h1>üí¨ Chat en Tiempo Real</h1>
            <div id="status" class="status disconnected">‚óè Desconectado</div>
        </div>

        <div class="chat-messages" id="mensajes">
            @if (Model != null && Model.Any())
            {
                @foreach (var mensaje in Model)
                {
                    <div class="message">
                        <div class="message-user">@mensaje.Usuario</div>
                        <div class="message-text">@mensaje.Texto</div>
                        <div class="message-time">@mensaje.Fecha.ToString("HH:mm:ss")</div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state">
                    <div class="empty-state-icon">üí≠</div>
                    <p>No hay mensajes todav√≠a. ¬°S√© el primero en escribir!</p>
                </div>
            }
        </div>

        <div class="chat-input">
            @if (estaLogueado)
            {
                <div class="current-user">
                    <span>Chateando como:</span>
                    <span class="current-user-name">@usuario</span>
                </div>
                <div class="input-group">
                    <input type="text" id="mensajeInput" placeholder="Escribe un mensaje..." />
                    <button id="enviarBtn" disabled>Enviar</button>
                </div>
            }
            else
            {
                <div class="login-prompt">
                    <div class="login-prompt-icon">üîí</div>
                    <h3>Inicia sesi√≥n para chatear</h3>
                    <p>Necesitas iniciar sesi√≥n para poder enviar mensajes en el chat</p>
                    <a href="/Registro/LogIn" class="btn-login">Iniciar Sesi√≥n</a>
                </div>
            }
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    const estaLogueado = @(estaLogueado ? "true" : "false");
    const nombreUsuario = "@(usuario ?? "")";

    if (estaLogueado) {
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .withAutomaticReconnect()
            .configureLogging(signalR.LogLevel.Information)
            .build();

        const mensajesDiv = document.getElementById("mensajes");
        const mensajeInput = document.getElementById("mensajeInput");
        const enviarBtn = document.getElementById("enviarBtn");
        const statusDiv = document.getElementById("status");

        // Recibir mensajes
        connection.on("RecibirMensaje", (usuario, texto, hora) => {
            // Remove empty state if it exists
            const emptyState = mensajesDiv.querySelector('.empty-state');
            if (emptyState) {
                emptyState.remove();
            }

            const messageDiv = document.createElement("div");
            messageDiv.className = "message";
            messageDiv.innerHTML = `
                <div class="message-user">${escapeHtml(usuario)}</div>
                <div class="message-text">${escapeHtml(texto)}</div>
                <div class="message-time">${hora}</div>
            `;
            mensajesDiv.appendChild(messageDiv);
            mensajesDiv.scrollTop = mensajesDiv.scrollHeight;
        });

        // Escape HTML to prevent XSS
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Enviar mensaje
        enviarBtn.addEventListener("click", async () => {
            const mensaje = mensajeInput.value.trim();

            if (mensaje) {
                try {
                    await connection.invoke("EnviarMensaje", nombreUsuario, mensaje);
                    mensajeInput.value = "";
                    mensajeInput.focus();
                } catch (err) {
                    console.error("Error al enviar mensaje:", err);
                    alert("Error al enviar el mensaje. Intenta nuevamente.");
                }
            }
        });

        // Enviar con Enter
        mensajeInput.addEventListener("keypress", (e) => {
            if (e.key === "Enter" && !enviarBtn.disabled) {
                enviarBtn.click();
            }
        });

        // Conectar
        async function start() {
            try {
                await connection.start();
                console.log("Conectado a SignalR");
                statusDiv.textContent = "‚óè Conectado";
                statusDiv.className = "status connected";
                enviarBtn.disabled = false;
            } catch (err) {
                console.error("Error de conexi√≥n:", err);
                statusDiv.textContent = "‚óè Desconectado";
                statusDiv.className = "status disconnected";
                setTimeout(start, 5000);
            }
        }

        connection.onclose(async () => {
            statusDiv.textContent = "‚óè Desconectado";
            statusDiv.className = "status disconnected";
            enviarBtn.disabled = true;
            await start();
        });

        connection.onreconnecting(() => {
            statusDiv.textContent = "‚óè Reconectando...";
            statusDiv.className = "status disconnected";
            enviarBtn.disabled = true;
        });

        connection.onreconnected(() => {
            statusDiv.textContent = "‚óè Conectado";
            statusDiv.className = "status connected";
            enviarBtn.disabled = false;
        });

        // Iniciar conexi√≥n
        start();

        // Auto-scroll on load
        mensajesDiv.scrollTop = mensajesDiv.scrollHeight;
    }
</script>
